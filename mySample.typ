#import "myTemplate.typ": *
#import "@preview/codelst:2.0.0": sourcecode


#show: project.with(
  anonymous: false,
  title: "基于Web的编程考试代码收集系统",
  author: "张钧玮",
  school: "计算机学院",
  id: "U202115520",
  mentor: "郑然",
  class: "大数据 2102 班",
  date: (2025, 2, 26)
)


= 课题来源、目的及意义
== 课题来源

在计算机体系课程学习中，代码实践是一个重要的环节。而除了复杂项目完成以外，最常见的代码实践就是完成小的编程问题，因此存在庞大的需要运行和鉴定编程问题的需求。

OJ系统（Online Judge，在线评测系统）是自动化运行和鉴定编程问题的用于编程竞赛和算法练习的在线平台。用户可以在系统中提交代码，系统会自动编译、运行并评测代码的正确性。通常会在前台给出所提交代码运行的信息或者执行结果。

== 课题目的及意义

课题目的是实现基于web的实时代码准确收集和判断运行。

前端页面应该提供可靠的页面。学生用户可以通过前端获取题目信息，编写代码，提交代码并运行，获取提交结果。对于老师，可以设置比赛，编辑比赛的题目信息，设定运行环境，以及给出比赛的时间长度。

后端服务器上判题机应该根据所运行的执行脚本自动运行比对,实时给出结果。得到的最优代码应该持久化保存在本地以供核验，以此提高编程考试的效率,减少人工干预,提高编程考试的公平性和准确性。

知名的oj系统有很多，例如leetcode和洛谷。于此同时，基于特定的目的（例如收集特定企业的题目，学校考核比赛，企业招聘等），私有自研可控或是开源的oj系统也很受欢迎，存在很大的需求市场。

在计算机课程学习和代码能力培养过程中，OJ系统是一种非常重要的工具。通过OJ系统，学生可以在实际的编程环境中练习代码，提高编程能力。同时，教师可以通过OJ系统自动化地批改作业，提高批改作业的效率。因此，设计和开发一套高效的OJ系统具有重要的意义。
#pagebreak()
= 国内外研究现状及发展趋势
== 国内外研究现状 

国内外存在许多知名的oj。例如，国外的oj有LeetCode、Codeforces等，国内的oj有洛谷、poj、acwing等。这些oj系统通常提供了丰富的题库，用户可以在上面刷题，同时也可以在上面参加编程比赛。

编译运行代码是cpu密集的任务，因此oj的性能主要取决于后端服务器的硬件性能和软件调度的效率。通过调查资料可知，leetcode大量使用例如cdn边缘计算和云服务来确保性能。为了保证服务器性能，高并发的并行异步编程包括内存控制和线程调度也是必不可少的。同时，为了保证代码的安全性，oj系统通常会使用沙箱技术来隔离用户提交的代码，以此来保证系统的安全性。

oj平台的功能丰富化，越来越走向社区，同时横向满足用户需求。绝大多数oj平台都提供了讨论区、题解区、博客区等功能，用户可以在上面交流学习经验，分享解题思路，也可以在上面分享招聘或者面试信息。

同时，oj的分类和标签往往是必不可少的。许多oj平台通过标签和难度来对题目进行了分类。例如，leetcode把难度分为简单、中等、困难三个等级，而洛谷则把题目分为普及组、提高组、省选组、NOI组等四个等级，用户可以根据自己的水平选择合适的题目进行练习。
== 发展趋势

自从容器化技术的出现和流行，越来越多的在线评测系统开始使用容器技术来隔离用户提交的代码，以此来保证系统的安全性。

与此同时，随着硬件性能的发展以及模块化编辑器技术的推广进步，越来越多的在线评测系统开始支持复杂的在线编程，例如代码高亮、代码提示、代码自动补全、在线调试等功能。

作为全世界最大的oj平台，leetcode选择使用leetcode模式代替了acm模式，这种模式题目的输入通过函数参数传递，输出通过返回值返回。因此用户只需要关注核心逻辑，无需处理输入输出。而其leetcode背后是复杂的编译和判断脚本；而绝大多数oj平台和代码比赛用的是acm模式，需要手动处理输入输出，通常从标准输入读取数据，并将结果输入到标准输出。因此用户需要编写完整的程序，包括输入输出逻辑。而后台的编译判断脚本相对简单。
#pagebreak()
= 研究内容及技术方案
== 课题研究内容

设计和开发一套完整的系统，包括但不限于以下内容：
1. 设计前端页面布局，路由，状态以及请求池
2. 在后端需要鉴权，处理前端请求，控制数据流向，与前端以及其他中间件沟通，
3. 需要使用数据库保存数据，包括设计数据库表结构，编写sql语句，编写业务代码。
4. 在应用中使用Docker隔离程序。设计批处理脚本保证用户执行代码安全。
5. 使用消息队列解耦程序，保证程序高并发非阻塞。
6. 使用设计模式优化代码。
== 课题预期目标

实现一套完整的系统，包括前端页面、后端服务器、数据库、消息队列、Docker容器等。

就核心功能，用户应可以在前端页面上编写代码，提交到后端服务器上，后端服务器可以自动运行代码，并给出结果。同时，后端服务器可以将结果持久化保存在数据库中，以供核验。

为了服务好核心功能，对用户应该有对应的登录，鉴权，筛选，对于管理员应该提供编辑，删除，添加等功能。

为了实现高性能，应该在前端使用异步请求，在后端使用消息队列和线程池解耦程序。

就程序的完整性而言，用户的登录，注册(基于邮箱),管理员权限的登记管理也是必不可少的。

== 技术路线和方案

=== 前端 Vue框架

选择以下技术路线和方案：
1. vue3  vue是构建用户界面的 JavaScript 框架。基于标准 HTML、CSS 和 JavaScript 构建，并提供了一套声明式的、组件化的编程模型，可以高效地开发用户界面。无论是简单还是复杂的界面，Vue 都可以胜任。
2. element-plus组件库。 element-plus提供了丰富完备的组件和布局选项。使用其提供的css样式和js组件
3. pinia pinia是vue的官方状态管理 可以用类似vue的声明式语法来描述全局状态，可以在全局对状态和js对象进行管理 非常方便
4. axios axios是使用广泛的前端网络请求库 在前端和后端之间进行数据交互 
5. mockJs mockJs使用mock对象模拟数据，测试接口
=== 后端 SpringBoot+Mybatis-plus

选择以下技术路线和方案：
1. SpringBoot SpringBoot是一个基于Spring的轻量级框架,通过springbean和依赖注入等手段，可以快速开发web相应的后端服务
2. Mybatis-plus Mybatis-plus是Mybatis的增强工具，作为orm，实现了关系型数据库行和对象的映射
=== 中间件 RabbitMQ Mysql Docker 

选择以下技术路线和方案：
1. RabbitMQ RabbitMQ是一个消息队列，可以实现消息的异步传输，解耦程序
2. Mysql Mysql是一个关系型数据库，用于保存用户表，题目表，提交历史等数据
3. Docker Docker是一个容器化技术，可以隔离程序，保证程序的安全性
=== 总体方案

本系统基于web，前端使用vue框架以及element-plus组件库开发页面。使用pinia进行状态管理，使用vue-router进行路由，使用axios进行网络请求，使用eslint进行代码检查。

后端采用java技术栈。使用springboot+mybatis框架开发后端服务器。使用mysql数据库保存数据。使用rabbitmq作为消息队列。使用docker容器隔离程序。

编译沙盒选择linux环境，使用使用明确的镜像和编译器版本，初版考虑支持c/cpp、Java、sml等语言，使用sh脚本进行批处理。

#pagebreak()
= 可行性和风险分析
== 制约因素和风险

1. 前端的版本依赖问题。在试图引入tailwindcss时候遇到了版本冲突问题，需要解决。
2. 业务的完善和细节问题。例如，用户登录注册的逻辑，管理员权限的管理，题目的编辑，删除，添加等功能。
3. 系统性能问题，需要仔细设计保证系统的性能。
== 成本估算与可行性
1. 项目相对复杂，复杂项目需要可支持的测试和推进办法来维持。因此可以采取敏捷开发的思路，定期交付可运行的版本。
2. 复杂项目的大范围调试是不切实际的，需要尽可能缩小测试范围，以及确保问题的来源和出错位置相符合。因此应该积极采用依赖倒置的思路，由子类提供抽象，而父类实现抽象。不是子类直接依赖父类，而是共同依赖由子类提供的抽象的实现，通过这种办法可以减少代码的耦合度，提高代码的可维护性。
3. deploy版本需要在云服务器上部署，oj需要比较多和核心和比较大的内存，价格参考华为云的云服务器价格。
#pagebreak()
= 课题研究进度安排
#table(
  columns: (200pt,200pt),
  inset:10pt,
  align:horizon,
  [*时间*],[*进度*],
  [2025/1/7],[开始准备],
  [2025/2/28],[完成开题报告],
  [2025/4/7],[交付初版系统],
  [2025/4/28],[交付最终系统],
)